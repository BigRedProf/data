using BigRedProf.Data.PackRatCompiler.Internal;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace BigRedProf.Data.PackRatCompiler
{
	/// <summary>
	/// This class can generate a <see cref="PackRat"/> class from a given model.
	/// </summary>
	public class PackRatGenerator
	{
		#region fields
		private ICompilationContext _compilationContext;
		#endregion

		#region constructors
		public PackRatGenerator(ICompilationContext compilationContext)
		{
			_compilationContext = compilationContext;
		}
		#endregion

		#region methods
		/// <summary>
		/// Generates a <see cref="PackRat"/> from the specified input model and writes it
		/// to the specified output model stream.
		/// </summary>
		/// <param name="inputModelStream">The model.</param>
		/// <param name="outputPackRatStream">The generated pack rat.</param>
		public void GeneratePackRat(Stream inputModelStream, Stream outputPackRatStream, string filePath)
		{
			if (inputModelStream == null)
				throw new ArgumentNullException(nameof(inputModelStream));

			if (outputPackRatStream == null)
				throw new ArgumentNullException(nameof(outputPackRatStream));

			SourceFile sourceFile = new SourceFile(_compilationContext, inputModelStream, filePath);
			if (sourceFile.RegistersPackRat())
			{
				using (CSharpWriter writer = new CSharpWriter(outputPackRatStream))
				{
					WriteFile(sourceFile, writer);
				}
			}
		}
		#endregion

		#region private methods
		private void WriteFile(SourceFile sourceFile, CSharpWriter writer)
		{
			writer.WriteLine("// <auto-generated/>");

			string @namespace = sourceFile.GetNamespace();
			writer.WriteLine($"namespace {@namespace}");
			IEnumerable<SyntaxNode> modelClasses = sourceFile.GetModelClasses();
			writer.WriteOpeningCurlyBrace();
			foreach (ClassDeclarationSyntax modelClass in modelClasses)
				WritePackRatClass(sourceFile, modelClass, writer);
			writer.WriteClosingCurlyBrace();
		}

		private void WritePackRatClass(SourceFile sourceFile, ClassDeclarationSyntax modelClass, CSharpWriter writer)
		{
			string className = modelClass.Identifier.ToString() + "PackRat";
			writer.WriteLine($"public class {className}");
			writer.WriteOpeningCurlyBrace();
			IList<PackFieldInfo> fields = sourceFile.GetFields(modelClass).OrderBy(f => f.Position).ToList();
			for(int i = 0; i < fields.Count; ++i)
			{
				PackFieldInfo field = fields[i];

				if(field.Position != i + 1)
				{
					_compilationContext.ReportError(
						CompilerError.InvalidFieldPosition,
						String.Format(
							"Field '{0}' in model '{1}' has invalid field position. Expected: {2}. Actual: {3}",
							field.Name,
							modelClass.Identifier.ToString(),
							i + 1,
							field.Position
						),
						sourceFile.FilePath,
						field.SourceLineNumber,
						field.SourceColumn
					);
				}

				WritePackRatField(sourceFile, modelClass, field, writer);

				if (field.Position == 1)
				{
					writer.WriteLine(string.Empty);
				}
			}
			writer.WriteClosingCurlyBrace();
		}

		private void WritePackRatField(
			SourceFile sourceFile, 
			ClassDeclarationSyntax modelClass, 
			PackFieldInfo field,
			CSharpWriter writer
		)
		{
			writer.WriteLine($"// {field.Name}");
		}
		#endregion
	}
}
